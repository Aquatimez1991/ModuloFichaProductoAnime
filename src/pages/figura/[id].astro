---
import Layout from '../../layouts/BaseLayout.astro';
import Header from '../../components/Header.astro';
import CartModal from '../../components/CartModal.astro';
import { allFigures } from '../../data/products';

export async function getStaticPaths() {
  return allFigures.map((figure) => ({
    params: { id: figure.id.toString() },
    props: { figure },
  }));
}

const { figure } = Astro.props;
---

<Layout title={`${figure.name} - FigureStore`}>
  <Header />
  
  <body data-stock={figure.stock}>
  
  <div class="min-h-screen bg-background">
    <!-- Breadcrumb -->
    <div class="max-w-7xl mx-auto px-4 py-4">
      <nav class="flex items-center gap-2 text-sm text-muted-foreground mb-6">
        <a href="/" class="hover:text-foreground transition-colors">Inicio</a>
        <span>/</span>
        <a href="/figuras" class="hover:text-foreground transition-colors">Figuras</a>
        <span>/</span>
        <span class="text-foreground">{figure.name}</span>
      </nav>
    </div>

    <div class="max-w-7xl mx-auto px-4 pb-16">
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-12">
        <!-- Product Images -->
        <div class="space-y-4">
          <div class="relative group">
            <div class="aspect-square overflow-hidden rounded-2xl" id="main-image">
              <img
                src={figure.images[0]}
                alt={figure.name}
                class="w-full h-full object-cover"
                onerror="this.src='/placeholder-figure.svg'; this.onerror=null;"
              />
            </div>
            

          </div>
          
          <!-- Thumbnail Images -->
          <div class="grid grid-cols-5 gap-2">
            {figure.images.map((image, index) => (
              <button
                class={`aspect-square overflow-hidden rounded-lg border-2 transition-colors thumbnail-btn ${index === 0 ? 'border-primary' : 'border-transparent hover:border-muted-foreground'}`}
                data-image={image}
                data-index={index}
              >
                <img
                  src={image}
                  alt={`${figure.name} ${index + 1}`}
                  class="w-full h-full object-cover"
                  onerror="this.src='/placeholder-figure.svg'; this.onerror=null;"
                />
              </button>
            ))}
          </div>
        </div>

        <!-- Product Info -->
        <div class="space-y-6">
          <!-- Badges -->
          <div class="flex items-center gap-2">
            <span class={`px-2 py-1 rounded text-sm font-medium ${
              figure.status === 'Disponible' ? 'bg-blue-500 text-white' :
              figure.status === 'Preventa' ? 'bg-orange-500 text-white' :
              'bg-red-500 text-white'
            }`}>
              {figure.status}
            </span>
          </div>

          <!-- Title and Rating -->
          <div>
            <h1 class="text-3xl font-bold text-foreground mb-2">
              {figure.name}
            </h1>
            <p class="text-lg text-muted-foreground mb-3">
              {figure.manufacturer}
            </p>
            <div class="flex items-center gap-4 mb-4">
              <div class="flex items-center gap-1">
                <svg class="w-5 h-5 fill-yellow-400 text-yellow-400" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                </svg>
                <span class="font-semibold">{figure.rating}</span>
                <span class="text-muted-foreground">({figure.reviews} reseñas)</span>
              </div>
            </div>
          </div>

          <!-- Price -->
          <div class="space-y-2">
            <div class="flex items-center gap-3">
              <span class="text-3xl font-bold text-foreground">
                S/{figure.price.toLocaleString()}
              </span>
              {figure.originalPrice > figure.price && (
                <span class="text-xl text-muted-foreground line-through">
                  S/{figure.originalPrice.toLocaleString()}
                </span>
              )}
            </div>
            {figure.originalPrice > figure.price && (
              <p class="text-green-600 font-medium">
                Ahorras S/{(figure.originalPrice - figure.price).toLocaleString()}
              </p>
            )}
          </div>

          <!-- Description -->
          <div>
            <h3 class="text-lg font-semibold text-foreground mb-2">Descripción</h3>
            <p class="text-muted-foreground leading-relaxed">
              {figure.description}
            </p>
          </div>

          <!-- Characteristics -->
          <div class="space-y-2">
            <h3 class="text-lg font-semibold text-foreground">Características</h3>
            <ul class="space-y-1">
              {figure.features.map((feature) => (
                <li class="flex items-center gap-2 text-muted-foreground">
                  <svg class="w-4 h-4 text-primary flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                  </svg>
                  <span>{feature}</span>
                </li>
              ))}
            </ul>
          </div>

          <!-- Specifications -->
          <div class="grid grid-cols-2 gap-4">
            <div>
              <span class="text-sm text-muted-foreground">Escala</span>
              <p class="font-medium">{figure.scale}</p>
            </div>
            <div>
              <span class="text-sm text-muted-foreground">Altura</span>
              <p class="font-medium">{figure.height}</p>
            </div>
            <div>
              <span class="text-sm text-muted-foreground">Material</span>
              <p class="font-medium">{figure.material}</p>
            </div>
            <div>
              <span class="text-sm text-muted-foreground">Stock</span>
              <p class="font-medium">{figure.stock} unidades</p>
            </div>
          </div>

          <!-- Quantity and Actions -->
          <div class="space-y-4">
            <!-- Quantity Selector -->
            <div class="flex items-center gap-4">
              <span class="text-sm font-medium">Cantidad:</span>
              <div class="flex items-center border border-border rounded-lg">
                <button
                  id="quantity-minus"
                  class={`px-3 py-2 hover:bg-muted transition-colors ${figure.stock === 1 ? 'opacity-50 cursor-not-allowed' : ''}`}
                  disabled={figure.stock === 1}
                >
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path>
                  </svg>
                </button>
                <span id="quantity-display" class="px-4 py-2 font-medium">1</span>
                <button
                  id="quantity-plus"
                  class={`px-3 py-2 hover:bg-muted transition-colors ${figure.stock === 1 ? 'opacity-50 cursor-not-allowed' : ''}`}
                  disabled={figure.stock === 1}
                >
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                  </svg>
                </button>
              </div>
              {figure.stock === 1 && (
                <span class="text-sm text-muted-foreground">(Stock limitado: 1 unidad)</span>
              )}
            </div>

            <!-- Action Buttons -->
            <div class="flex gap-4">
              <button
                id="add-to-cart-btn"
                data-figure-id={figure.id}
                class="flex-1 bg-primary text-primary-foreground px-6 py-3 rounded-lg hover:bg-primary/90 transition-colors font-medium"
              >
                Agregar al Carrito
              </button>
              <button
                id="buy-now-btn"
                data-figure-id={figure.id}
                class="flex-1 bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors font-medium"
              >
                Comprar Ahora
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <CartModal />
</Layout>

<script>
  // Thumbnail navigation
  const thumbnailBtns = document.querySelectorAll('.thumbnail-btn');
  const mainImage = document.getElementById('main-image')?.querySelector('img');
  
  thumbnailBtns.forEach(btn => {
    btn.addEventListener('click', () => {
      // Remove active class from all thumbnails
      thumbnailBtns.forEach(b => {
        b.classList.remove('border-primary');
        b.classList.add('border-transparent');
      });
      
      // Add active class to clicked thumbnail
      btn.classList.remove('border-transparent');
      btn.classList.add('border-primary');
      
      // Update main image
      const imageUrl = btn.getAttribute('data-image');
      if (mainImage && imageUrl) {
        mainImage.src = imageUrl;
      }
    });
  });

  // Quantity controls
  let quantity = 1;
  const quantityDisplay = document.getElementById('quantity-display');
  const quantityMinus = document.getElementById('quantity-minus');
  const quantityPlus = document.getElementById('quantity-plus');
  
  // Get stock from data attribute
  const stock = parseInt(document.body.getAttribute('data-stock') || '1');
  
  // Update initial display if stock is 1
  if (stock === 1 && quantityDisplay) {
    quantityDisplay.textContent = '1';
  }

  quantityMinus?.addEventListener('click', () => {
    if (quantity > 1) {
      quantity--;
      if (quantityDisplay) {
        quantityDisplay.textContent = quantity.toString();
      }
    }
  });

  quantityPlus?.addEventListener('click', () => {
    if (quantity < stock) {
      quantity++;
      if (quantityDisplay) {
        quantityDisplay.textContent = quantity.toString();
      }
    }
  });

  // Add to cart functionality
  const addToCartBtn = document.getElementById('add-to-cart-btn');
  addToCartBtn?.addEventListener('click', () => {
    const figureIdStr = addToCartBtn.dataset.figureId;
    if (!figureIdStr) {
      console.error('figureId not found in dataset');
      return;
    }
    
    const figureId = parseInt(figureIdStr);
    
    // Get current store
    const store = JSON.parse(localStorage.getItem('figure-store') || '{"cart": {}, "wishlist": []}');
    
    // Add figure to cart with quantity
    store.cart[figureId] = (store.cart[figureId] || 0) + quantity;
    
    // Save to localStorage
    localStorage.setItem('figure-store', JSON.stringify(store));
    
    // Dispatch event to update header
    window.dispatchEvent(new CustomEvent('cartUpdated'));
    
    // Show notification
    showNotification('¡Producto agregado al carrito!');
  });

  // Buy now functionality
  const buyNowBtn = document.getElementById('buy-now-btn');
  buyNowBtn?.addEventListener('click', () => {
    const figureIdStr = buyNowBtn.dataset.figureId;
    if (!figureIdStr) {
      console.error('figureId not found in dataset');
      return;
    }
    
    const figureId = parseInt(figureIdStr);
    
    // Add to cart first
    const store = JSON.parse(localStorage.getItem('figure-store') || '{"cart": {}, "wishlist": []}');
    store.cart[figureId] = (store.cart[figureId] || 0) + quantity;
    localStorage.setItem('figure-store', JSON.stringify(store));
    window.dispatchEvent(new CustomEvent('cartUpdated'));
    
    // Use the global buyNowWithQuantity function
    if (window.buyNowWithQuantity) {
      window.buyNowWithQuantity(figureId, quantity);
    }
  });

  // Enhanced notification system
  function showNotification(message: string) {
    const notification = document.createElement('div');
    notification.className = 'fixed top-20 right-4 z-50 bg-emerald-500 text-white px-4 py-3 rounded-xl shadow-lg transform translate-x-full transition-transform duration-300';
    notification.innerHTML = `
      <div class="flex items-center gap-3">
        <span class="text-lg font-bold">✓</span>
        <p class="font-medium">${message}</p>
        <button onclick="this.parentElement.parentElement.remove()" class="ml-2 text-white/80 hover:text-white transition-colors">✕</button>
      </div>
    `;
    document.body.appendChild(notification);
    
    // Show notification
    setTimeout(() => {
      notification.classList.remove('translate-x-full');
    }, 100);
    
    // Hide notification
    setTimeout(() => {
      notification.classList.add('translate-x-full');
      setTimeout(() => notification.remove(), 300);
    }, 3000);
  }
</script>
