---
// ProductCarousel.astro
import { allFigures } from '../data/products';

// Obtener todas las figuras para el carousel
const carouselProducts = allFigures;
---

<section id="productos" class="py-16 bg-gradient-to-br from-emerald-50/50 via-teal-50/30 to-cyan-50/50">
  <div class="max-w-6xl mx-auto px-4">
    <div class="text-center mb-8">
      <h2 class="text-3xl font-bold text-foreground mb-2">
        Nuestras Figuras Destacadas
      </h2>
      <p class="text-muted-foreground">
        Descubre nuestra colección exclusiva de figuras anime
      </p>
    </div>

    <!-- Carousel Container -->
    <div class="relative overflow-hidden rounded-3xl shadow-medium bg-white/80 backdrop-blur-sm border border-white/20">
      <div class="carousel-container flex transition-transform duration-1000 ease-in-out" id="carousel">
        {carouselProducts.map((product, index) => (
          <div class="carousel-slide min-w-full flex-shrink-0 flex justify-center">
            <div class="flex flex-col lg:flex-row items-center p-12 max-w-5xl w-full">
              <!-- Product Image -->
              <div class="flex-1 flex justify-center mb-6 lg:mb-0">
                <div class="relative group">
                  <a href={`/figura/${product.id}`} class="block">
                    <div class="w-72 h-72 lg:w-80 lg:h-80 overflow-hidden rounded-2xl cursor-pointer shadow-soft hover:shadow-medium transition-all duration-300" id={`main-image-${index}`}>
                      <img
                        src={product.image}
                        alt={product.name}
                        class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-500"
                        onerror="this.src='/placeholder-figure.svg'; this.onerror=null;"
                      />
                    </div>
                  </a>
                </div>
              </div>

              <!-- Product Info -->
              <div class="flex-1 text-center lg:text-left lg:pl-12">
                <div class="space-y-4">
                  <div>
                    <span class="bg-gradient-to-r from-emerald-500 to-teal-500 text-white px-4 py-2 rounded-full text-sm font-medium mb-3 inline-block shadow-soft">
                      {product.status}
                    </span>
                    <a href={`/figura/${product.id}`} class="block hover:opacity-80 transition-opacity">
                      <h2 class="text-2xl font-bold text-foreground mb-2 cursor-pointer hover:text-primary transition-colors">
                        {product.name}
                      </h2>
                    </a>
                    <p class="text-muted-foreground mb-3">
                      {product.manufacturer}
                    </p>
                    <div class="flex items-center justify-center lg:justify-start gap-2 mb-3">
                      <div class="flex items-center">
                        <svg class="w-4 h-4 fill-yellow-400 text-yellow-400" fill="currentColor" viewBox="0 0 24 24">
                          <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                        </svg>
                        <span class="font-medium ml-1 text-sm">{product.rating}</span>
                        <span class="text-muted-foreground ml-1 text-sm">({product.reviews} reseñas)</span>
                      </div>
                    </div>
                  </div>

                  <!-- Price -->
                  <div class="space-y-2">
                    <div class="flex items-center justify-center lg:justify-start gap-3">
                      <span class="text-3xl font-bold text-foreground">
                        S/{product.price.toLocaleString('en-US')}
                      </span>
                      {product.originalPrice > product.price && (
                        <span class="text-lg text-muted-foreground line-through">
                          S/{product.originalPrice.toLocaleString('en-US')}
                        </span>
                      )}
                    </div>
                    {product.originalPrice > product.price && (
                      <p class="text-green-600 font-medium text-sm">
                        Ahorras S/{(product.originalPrice - product.price).toLocaleString('en-US')} ({Math.round(((product.originalPrice - product.price) / product.originalPrice) * 100)}% de descuento)
                      </p>
                    )}
                  </div>

                  <!-- Action Buttons -->
                  <div class="flex gap-3 pt-4 justify-center lg:justify-start">
                    <button
                      class="add-to-cart-btn bg-gradient-to-r from-emerald-500 to-teal-500 text-white px-6 py-3 rounded-xl font-medium hover:from-emerald-600 hover:to-teal-600 transition-all duration-300 flex items-center gap-2 shadow-soft hover:shadow-medium"
                      data-product-id={product.id}
                    >
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5 5M7 13l2.5 5m6-5v6a2 2 0 01-2 2H9a2 2 0 01-2-2v-6m8 0V9a2 2 0 00-2-2H9a2 2 0 00-2 2v4.01"></path>
                      </svg>
                      Agregar al Carrito
                    </button>
                    <button
                      class="buy-now-btn border border-emerald-500/30 text-emerald-600 px-6 py-3 rounded-xl font-medium hover:bg-emerald-500 hover:text-white transition-all duration-300 shadow-soft hover:shadow-medium"
                      data-product-id={product.id}
                    >
                      Comprar Ahora
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>

      <!-- Navigation Arrows -->
      <button class="carousel-prev absolute left-6 top-1/2 transform -translate-y-1/2 bg-white/90 hover:bg-white text-gray-800 p-3 rounded-full shadow-lg transition-all z-10">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
      </button>
      <button class="carousel-next absolute right-6 top-1/2 transform -translate-y-1/2 bg-white/90 hover:bg-white text-gray-800 p-3 rounded-full shadow-lg transition-all z-10">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
      </button>

      <!-- Dots Indicator -->
      <div class="flex justify-center mt-6 mb-4 space-x-2">
        {carouselProducts.map((_, index) => (
          <button
            class={`carousel-indicator w-3 h-3 rounded-full transition-all ${index === 0 ? 'bg-primary' : 'bg-gray-300 hover:bg-gray-400'}`}
            data-slide={index}
          ></button>
        ))}
      </div>
    </div>
  </div>
</section>

<script is:inline define:vars={{ totalSlides: carouselProducts.length }}>
  // Carousel functionality
  let currentSlide = 0;
  const carousel = document.querySelector('.carousel-container');
  const slides = document.querySelectorAll('.carousel-slide');
  const prevBtn = document.querySelector('.carousel-prev');
  const nextBtn = document.querySelector('.carousel-next');
  const indicators = document.querySelectorAll('.carousel-indicator');

  function showSlide(index) {
    if (index < 0) index = totalSlides - 1;
    if (index >= totalSlides) index = 0;
    
    currentSlide = index;
    
    // Update carousel position
    if (carousel) {
      carousel.style.transform = `translateX(-${currentSlide * 100}%)`;
    }
    
    // Update indicators
    indicators.forEach((indicator, i) => {
      if (i === currentSlide) {
        indicator.classList.add('bg-primary');
        indicator.classList.remove('bg-gray-300', 'hover:bg-gray-400');
      } else {
        indicator.classList.remove('bg-primary');
        indicator.classList.add('bg-gray-300', 'hover:bg-gray-400');
      }
    });
  }

  function nextSlide() {
    showSlide(currentSlide + 1);
  }

  function prevSlide() {
    showSlide(currentSlide - 1);
  }

  // Event listeners for navigation
  nextBtn?.addEventListener('click', nextSlide);
  prevBtn?.addEventListener('click', prevSlide);

  indicators.forEach((indicator, index) => {
    indicator.addEventListener('click', () => showSlide(index));
  });

  // Event listeners for action buttons
  document.addEventListener('DOMContentLoaded', () => {
    // Add to cart buttons
    document.querySelectorAll('.add-to-cart-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        const productId = parseInt(btn.getAttribute('data-product-id') || '0');
        
        // Get current store
        const store = JSON.parse(localStorage.getItem('figure-store') || '{"cart": {}, "wishlist": []}');
        
        // Add figure to cart
        store.cart[productId] = (store.cart[productId] || 0) + 1;
        
        // Save to localStorage
        localStorage.setItem('figure-store', JSON.stringify(store));
        
        // Dispatch event to update header
        window.dispatchEvent(new CustomEvent('cartUpdated'));
        
        // Show notification
        showNotification('¡Producto agregado al carrito!');
      });
    });

    // Buy now buttons
    document.querySelectorAll('.buy-now-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        const productId = parseInt(btn.getAttribute('data-product-id') || '0');
        
        // Add to cart first
        const store = JSON.parse(localStorage.getItem('figure-store') || '{"cart": {}, "wishlist": []}');
        store.cart[productId] = (store.cart[productId] || 0) + 1;
        localStorage.setItem('figure-store', JSON.stringify(store));
        window.dispatchEvent(new CustomEvent('cartUpdated'));
        
        // Use the global buyNowGlobal function
        if (window.buyNowGlobal) {
          window.buyNowGlobal(productId);
        }
      });
    });
  });

  // Show notification function
  function showNotification(message) {
    const notification = document.createElement('div');
    notification.className = 'fixed top-20 right-4 bg-emerald-500 text-white px-4 py-3 rounded-xl shadow-lg transform translate-x-full transition-transform duration-300 z-50';
    notification.innerHTML = `
      <div class="flex items-center gap-3">
        <span class="text-lg font-bold">✓</span>
        <p class="font-medium">${message}</p>
        <button onclick="this.parentElement.parentElement.remove()" class="ml-2 text-white/80 hover:text-white transition-colors">✕</button>
      </div>
    `;
    document.body.appendChild(notification);
    
    // Show notification
    setTimeout(() => {
      notification.classList.remove('translate-x-full');
    }, 100);
    
    // Hide notification
    setTimeout(() => {
      notification.classList.add('translate-x-full');
      setTimeout(() => notification.remove(), 300);
    }, 3000);
  }

  // Auto-play
  setInterval(nextSlide, 5000);

  // Initialize
  showSlide(0);
</script>
