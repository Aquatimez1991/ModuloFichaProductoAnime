---
// CartModal.astro
---

<!-- Cart Modal -->
<div id="cart-modal" class="fixed inset-0 z-50 hidden">
  <div class="absolute inset-0 bg-black/50 backdrop-blur-sm"></div>
  <div class="absolute right-0 top-0 h-full w-full max-w-md bg-background shadow-2xl transform translate-x-full transition-transform duration-300">
    <div class="flex flex-col h-full">
      <!-- Header -->
      <div class="flex items-center justify-between p-6 border-b border-border">
        <h2 class="text-xl font-bold">Carrito de Compras</h2>
        <button id="close-cart" class="text-muted-foreground hover:text-foreground transition-colors">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>

      <!-- Cart Items -->
      <div class="flex-1 overflow-y-auto p-6">
        <div id="empty-cart" class="text-center py-12 hidden">
          <svg class="w-16 h-16 mx-auto mb-4 text-muted-foreground/50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"></path>
          </svg>
          <p class="text-lg font-medium mb-2">Tu carrito está vacío</p>
          <p class="text-muted-foreground">Agrega algunos productos para comenzar</p>
        </div>
        
        <div id="cart-items" class="space-y-4">
          <!-- Cart items will be populated here -->
        </div>
      </div>

      <!-- Footer -->
      <div class="border-t border-border p-6">
        <div class="flex items-center justify-between mb-4">
          <span class="font-semibold">Total:</span>
          <span id="cart-total" class="font-bold text-lg">S/0</span>
        </div>
        <div class="flex gap-2">
          <button id="checkout-btn" class="flex-1 bg-primary text-primary-foreground py-3 px-4 rounded-lg font-medium hover:bg-primary/90 transition-colors">
            Comprar Ahora
          </button>
          <button id="clear-cart" class="px-4 py-3 border border-border rounded-lg hover:bg-muted transition-colors">
            Limpiar
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Cart modal functionality
  const cartModal = document.getElementById('cart-modal');
  const closeCart = document.getElementById('close-cart');
  const emptyCart = document.getElementById('empty-cart');
  const cartItems = document.getElementById('cart-items');
  const cartTotal = document.getElementById('cart-total');
  const checkoutBtn = document.getElementById('checkout-btn');
  const clearCartBtn = document.getElementById('clear-cart');

  // Figure data from imported products
  const figureData: Record<number, any> = {};
  
  // Populate figure data from imported products
  const allFiguresData = JSON.parse(document.body.getAttribute('data-figures') || '[]');
  allFiguresData.forEach((figure: any) => {
    figureData[figure.id] = {
      name: figure.name,
      price: figure.price,
      image: figure.image,
      stock: figure.stock
    };
  });

  function openCart() {
    if (cartModal) {
      cartModal.classList.remove('hidden');
      setTimeout(() => {
        cartModal.querySelector('.transform')?.classList.remove('translate-x-full');
      }, 10);
      updateCartDisplay();
    }
  }

  function closeCartModal() {
    if (cartModal) {
      cartModal.querySelector('.transform')?.classList.add('translate-x-full');
      setTimeout(() => {
        cartModal.classList.add('hidden');
      }, 300);
    }
  }

  function updateCartDisplay() {
    const store = JSON.parse(localStorage.getItem('figure-store') || '{"cart": {}, "wishlist": []}');
    const cart = store.cart;

    if (Object.keys(cart).length === 0) {
      emptyCart?.classList.remove('hidden');
      cartItems?.classList.add('hidden');
      if (cartTotal) cartTotal.textContent = 'S/0';
      return;
    }

    emptyCart?.classList.add('hidden');
    cartItems?.classList.remove('hidden');
    
    let total = 0;
    let itemsHTML = '';

    Object.entries(cart).forEach(([figureId, quantity]) => {
      const figure = figureData[parseInt(figureId)];
      if (figure) {
        const itemTotal = figure.price * (quantity as number);
        total += itemTotal;
        
        const isStockLimited = figure.stock === 1;
        const canIncrease = (quantity as number) < figure.stock;
        
        itemsHTML += `
          <div class="flex items-center gap-3 py-3 border-b last:border-b-0">
            <img src="${figure.image}" alt="${figure.name}" class="w-16 h-16 object-cover rounded-lg" onerror="this.src='/placeholder-figure.svg'; this.onerror=null;">
            <div class="flex-1">
              <h4 class="font-medium text-sm">${figure.name}</h4>
              <p class="text-gray-500 text-sm">S/${figure.price.toLocaleString('en-US')}</p>
              ${isStockLimited ? '<p class="text-orange-500 text-xs">Stock limitado: 1 unidad</p>' : ''}
            </div>
            <div class="flex items-center gap-2">
              <button onclick="updateQuantity(${figureId}, ${(quantity as number) - 1})" class="w-6 h-6 border border-gray-300 rounded flex items-center justify-center hover:bg-gray-50 ${isStockLimited ? 'opacity-50 cursor-not-allowed' : ''}" ${isStockLimited ? 'disabled' : ''}>
                <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path>
                </svg>
              </button>
              <span class="w-8 text-center text-sm">${quantity}</span>
              <button onclick="updateQuantity(${figureId}, ${(quantity as number) + 1})" class="w-6 h-6 border border-gray-300 rounded flex items-center justify-center hover:bg-gray-50 ${!canIncrease ? 'opacity-50 cursor-not-allowed' : ''}" ${!canIncrease ? 'disabled' : ''}>
                <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                </svg>
              </button>
            </div>
            <button onclick="removeFromCart(${figureId})" class="text-red-500 hover:text-red-700">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
              </svg>
            </button>
          </div>
        `;
      }
    });

    if (cartItems) {
      cartItems.innerHTML = itemsHTML;
    }
    
    if (cartTotal) {
      cartTotal.textContent = `S/${total.toLocaleString('en-US')}`;
    }
  }

  function updateQuantity(figureId: number, quantity: number) {
    const store = JSON.parse(localStorage.getItem('figure-store') || '{"cart": {}, "wishlist": []}');
    const figure = figureData[figureId];
    
    if (quantity <= 0) {
      delete store.cart[figureId];
    } else if (figure && quantity <= figure.stock) {
      store.cart[figureId] = quantity;
    }
    
    localStorage.setItem('figure-store', JSON.stringify(store));
    window.dispatchEvent(new CustomEvent('cartUpdated'));
    updateCartDisplay();
  }

  function removeFromCart(figureId: number) {
    const store = JSON.parse(localStorage.getItem('figure-store') || '{"cart": {}, "wishlist": []}');
    delete store.cart[figureId];
    localStorage.setItem('figure-store', JSON.stringify(store));
    window.dispatchEvent(new CustomEvent('cartUpdated'));
    updateCartDisplay();
  }

  function checkout() {
    const store = JSON.parse(localStorage.getItem('figure-store') || '{"cart": {}, "wishlist": []}');
    const cart = store.cart;
    
    if (Object.keys(cart).length === 0) {
      alert('Tu carrito está vacío');
      return;
    }

    let total = 0;
    let message = '¡Hola! Me interesa comprar:\n\n';
    
    Object.entries(cart).forEach(([figureId, quantity]) => {
      const figure = figureData[figureId];
      if (figure) {
        const itemTotal = figure.price * (quantity as number);
        total += itemTotal;
        message += `• ${figure.name} x${quantity} - S/${itemTotal.toLocaleString('en-US')}\n`;
      }
    });
    
    message += `\nTotal: S/${total.toLocaleString('en-US')}\n\n¿Podrías darme más información sobre disponibilidad y envío?`;
    
    const whatsappUrl = `https://wa.me/51949799869?text=${encodeURIComponent(message)}`;
    window.open(whatsappUrl, '_blank');
  }

  function clearCart() {
    const store = JSON.parse(localStorage.getItem('figure-store') || '{"cart": {}, "wishlist": []}');
    store.cart = {};
    localStorage.setItem('figure-store', JSON.stringify(store));
    window.dispatchEvent(new CustomEvent('cartUpdated'));
    updateCartDisplay();
  }

  // Event listeners
  closeCart?.addEventListener('click', closeCartModal);
  checkoutBtn?.addEventListener('click', checkout);
  clearCartBtn?.addEventListener('click', clearCart);

  // Close modal when clicking outside
  cartModal?.addEventListener('click', (e) => {
    if (e.target === cartModal) {
      closeCartModal();
    }
  });

  // Listen for cart updates
  window.addEventListener('cartUpdated', updateCartDisplay);

  // Make functions globally available
  window.openCart = openCart;
  window.updateQuantity = updateQuantity;
  window.removeFromCart = removeFromCart;
</script>

